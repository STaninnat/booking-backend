// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookings.sql

package database

import (
	"context"
	"time"
)

const checkRoomAvailability = `-- name: CheckRoomAvailability :one
SELECT id FROM bookings
WHERE room_id = $1
AND (
    (check_in < $2 AND check_out >= $3)
    OR (check_in >= $3 AND check_out <= $2)
)
LIMIT 1
`

type CheckRoomAvailabilityParams struct {
	RoomID   string
	CheckIn  time.Time
	CheckOut time.Time
}

func (q *Queries) CheckRoomAvailability(ctx context.Context, arg CheckRoomAvailabilityParams) (string, error) {
	row := q.db.QueryRowContext(ctx, checkRoomAvailability, arg.RoomID, arg.CheckIn, arg.CheckOut)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (id, created_at, updated_at, check_in, check_out, user_id, room_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, check_in, check_out, user_id, room_id
`

type CreateBookingParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	CheckIn   time.Time
	CheckOut  time.Time
	UserID    string
	RoomID    string
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CheckIn,
		arg.CheckOut,
		arg.UserID,
		arg.RoomID,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckIn,
		&i.CheckOut,
		&i.UserID,
		&i.RoomID,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM bookings
WHERE id = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const getAllBookings = `-- name: GetAllBookings :many
SELECT b.id, b.check_in, b.check_out, r.room_name
FROM bookings b
JOIN rooms r ON b.room_id = r.id
ORDER BY b.check_in ASC
`

type GetAllBookingsRow struct {
	ID       string
	CheckIn  time.Time
	CheckOut time.Time
	RoomName string
}

func (q *Queries) GetAllBookings(ctx context.Context) ([]GetAllBookingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBookingsRow
	for rows.Next() {
		var i GetAllBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.CheckIn,
			&i.CheckOut,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookedDatesByRoomID = `-- name: GetBookedDatesByRoomID :many
SELECT check_in, check_out
FROM bookings
WHERE room_id = $1
`

type GetBookedDatesByRoomIDRow struct {
	CheckIn  time.Time
	CheckOut time.Time
}

func (q *Queries) GetBookedDatesByRoomID(ctx context.Context, roomID string) ([]GetBookedDatesByRoomIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookedDatesByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookedDatesByRoomIDRow
	for rows.Next() {
		var i GetBookedDatesByRoomIDRow
		if err := rows.Scan(&i.CheckIn, &i.CheckOut); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingsByRoomID = `-- name: GetBookingsByRoomID :many
SELECT b.id, b.updated_at, b.check_in, b.check_out, b.user_id, u.email AS user_email
FROM bookings b
JOIN users u ON b.user_id = u.id
WHERE b.room_id = $1
`

type GetBookingsByRoomIDRow struct {
	ID        string
	UpdatedAt time.Time
	CheckIn   time.Time
	CheckOut  time.Time
	UserID    string
	UserEmail string
}

func (q *Queries) GetBookingsByRoomID(ctx context.Context, roomID string) ([]GetBookingsByRoomIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookingsByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingsByRoomIDRow
	for rows.Next() {
		var i GetBookingsByRoomIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UpdatedAt,
			&i.CheckIn,
			&i.CheckOut,
			&i.UserID,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingsByUserID = `-- name: GetBookingsByUserID :many
SELECT b.id, b.updated_at, b.check_in, b.check_out, b.user_id, b.room_id, r.room_name
FROM bookings b
JOIN rooms r ON b.room_id = r.id
WHERE b.user_id = $1
`

type GetBookingsByUserIDRow struct {
	ID        string
	UpdatedAt time.Time
	CheckIn   time.Time
	CheckOut  time.Time
	UserID    string
	RoomID    string
	RoomName  string
}

func (q *Queries) GetBookingsByUserID(ctx context.Context, userID string) ([]GetBookingsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookingsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingsByUserIDRow
	for rows.Next() {
		var i GetBookingsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UpdatedAt,
			&i.CheckIn,
			&i.CheckOut,
			&i.UserID,
			&i.RoomID,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
