// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, name, password, api_key, api_key_expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	ID              string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Name            string
	Password        string
	ApiKey          string
	ApiKeyExpiresAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Password,
		arg.ApiKey,
		arg.ApiKeyExpiresAt,
	)
	return err
}

const getUser = `-- name: GetUser :one

SELECT id, created_at, updated_at, name, password, api_key, api_key_expires_at FROM users WHERE api_key = $1
`

func (q *Queries) GetUser(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Password,
		&i.ApiKey,
		&i.ApiKeyExpiresAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, created_at, updated_at, name, password, api_key, api_key_expires_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Password,
		&i.ApiKey,
		&i.ApiKeyExpiresAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one

SELECT id, created_at, updated_at, name, password, api_key, api_key_expires_at FROM users WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Password,
		&i.ApiKey,
		&i.ApiKeyExpiresAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec

UPDATE users
SET updated_at = $1, api_key = $2, api_key_expires_at = $3
WHERE id = $4
`

type UpdateUserParams struct {
	UpdatedAt       time.Time
	ApiKey          string
	ApiKeyExpiresAt time.Time
	ID              string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UpdatedAt,
		arg.ApiKey,
		arg.ApiKeyExpiresAt,
		arg.ID,
	)
	return err
}
